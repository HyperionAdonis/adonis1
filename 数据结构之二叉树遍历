一.基本概念
每个结点最多有两棵子树，左子树和右子树，次序不可以颠倒。
性质：
1.非空二叉树的第n层上至多有2^(n-1)个元素。
2.深度为h的二叉树至多有2^h-1个结点。
满二叉树：所有终端都在同一层次，且非终端结点的度数为2。
在满二叉树中若其深度为h，则其所包含的结点数必为2^h-1。
完全二叉树：除了最大的层次即成为一颗满二叉树且层次最大那层所有的结点均向左靠齐，即集中在左面的位置上，不能有空位置。
对于完全二叉树，设一个结点为i则其父节点为i/2，2i为左子节点，2i+1为右子节点。
二.存储结构
  1.顺序存储，将数据结构存在一块固定的数组中。
    #define length 100
    typedef DataType char;
    typedef struct node{
      DataType data;
      int lchild;
      int rchild;
    }Node;
    Node tree[LENGTH];
    int root;
    int length;
  2.链式存储。
    typedef char datatype;
    typedef struct BinNode{  
      datatype data;  
      struct BinNode* lchild;  
      struct BinNode* rchild;  
    }BinNode;  
    typedef BinNode * bintree;          //bintree本身是个指向结点的指针 
三.遍历方式
    1.递归遍历
        void preorder(bintree * t){  
        if(t){  
          printf("%c ",t->data);  
          preorder(t->lchild);  
          preorder(t->rchild);  
              }  
         }  
         其他只是遍历的先后次序不同。
    2.非递归遍历
        (1)栈定义（固定大小）
              #define SIZE 100
              struct treeStack{
                  bintree data[SIZE];  
                  int tag[SIZE];   //为后续遍历准备的  
                  int top;     //top为数组的下标  
              }
              void pushStack(treeStack * stack,bintree * tree)
              {
                  if(stack->top==SIZE)
                  {
                    printf(" THE STACK IS ALREADY FULL!");
                  }
                  else()
                  {
                    stack->top=stack->top+1;
                    stack->data[stack->top]=tree;
                  
                  }
              }
              treeStack * popStack(treeStack * stack)
              {
                if(s->top==-1)
                  return NULL;
                else()
                {
                  s->top--;
                  return s->data[s->top+1];
                }
              }
      （2）树的遍历
              [1].先序遍历
                    void preorder_dev(bintree * tree)
                    {
                      treeStack stack;
                      stack->top=-1;(top对应数组的位置,开始是-1)
                      if(!tree)
                      {
                        printf("the tree is empty!");
                      }
                      else
                      {
                          while(tree||stack.top!=-1)当结点不空或者栈不空的时候
                         {
                            while(tree)
                            {
                              printf(tree->data);
                              push(&stack,tree);
                              tree=tree->lchild;
                            }
                            tree=pop(&stack);
                            tree=tree->rchild;
                         }
                     }
                    }
                [2].中序遍历
                    void midorder_dev(bintree * tree)
                    {
                      treeStack stack;
                      stack->top=-1;
                      if(!tree)
                      {
                        printf("the tree is empty");
                      }
                      else
                      {
                        while(tree||stack->top!=-1)
                        {
                          while(tree)
                          {
                            push(&stack,tree);
                            tree=tree->lchild;
                          }
                          tree=pop(&stack);
                          printf(tree->data);
                          tree=tree->rchild;
                        }
                      }
                [3].后序遍历
                    void backorder_dev(bintree * tree)
                    {
                          treeStack stack;
                          stack->top=-1;
                      if(!tree)
                      {
                          printf("the tree is empty");
                      }
                      else
                      {
                          while(tree||stack->top!=-1)
                          {
                              while(tree)
                              {
                                  push(&stack,tree);
                                  s.tag[s.top]=0;
                                  tree=tree->lchild;
                              }
                              if(stack.tag[stack.top]==0)    //第一次访问时，转向同层右结点  
                              {
                                tree=stack.data[stack.top];   //左走到底时t是为空的，必须有这步！
                                stack.tag[stack.top]=1;
                                tree=tree->rchild;
                              }
                              else
                              {
                                    while (stack.tag[stack.top] == 1){ //找到栈中下一个第一次访问的结点，退出循环时并没有pop所以为其左子结点  
                                    tree = pop(&s);  
                                   printf(tree->data);  
                                  }  
                                   t = NULL; //必须将t置空。跳过向左走，直接向右走  
                              
                                } 
                          }
                      
                      }
                    
                    }
                    
                    
                    
            

